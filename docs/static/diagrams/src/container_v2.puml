@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons
!define FONTAWESOME https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/font-awesome-5

!include FONTAWESOME/users.puml
!include FONTAWESOME/vuejs.puml
!include FONTAWESOME/python.puml
!include FONTAWESOME/file.puml
!include DEVICONS/postgresql.puml
!include DEVICONS/mongodb.puml
!include DEVICONS/java.puml

title Container Diagram (C4 Model)


SHOW_PERSON_OUTLINE()
Person(user, "User", "A user of GOAT application")


System_Boundary(a1, "Authentication"){
    Container(auth, "API", "Keycloak", "Handles authentication for GOAT", $sprite="java")
    ContainerDb(authdb, "Database", "PostgreSQL", "Holds user data and keycloak configuration", $sprite="postgresql")
}

System_Boundary(s1, "Authorization"){
    Container(author, "API", "Python and FastAPI", "It manages the subscriptions and features that are accessible by the users.", $sprite="python")
    ContainerDb(authordb, "Database", "PostgreSQL", "Holds the user data and their subscriptions.", $sprite="postgresql")
}

System_Boundary(a2, "Application"){
    Container(applicationapi, "API", "Python and FastAPI", "It bundles the analyses and map specific features such as the indicators, projects and much more.", $sprite="python")
    ContainerDb(applicationdb, "Application Database", "PostgreSQL", "Holds the application specific base data.", $sprite="postgresql")
    ContainerDb(organizationdb, "Organization Database", "PostgreSQL", "Holds the Organization data in a multi-tenant manner.", $sprite="postgresql")
    Container(r5, "Routing Engine", "CONVEYAL R5", "Java engine handling travel-time calculation logic for public transport and car", $sprite="java")
}


' ' Make a relation between auth and authdb
Rel(auth, authdb, "Reads/Writes", "JDBC")
Rel(author, authordb, "Reads/Writes", "SQLAlchemy")
Rel(applicationapi, applicationdb, "Reads/Writes", "SQLAlchemy")
Rel(applicationapi, organizationdb, "Reads/Writes", "SQLAlchemy")
Rel_L(s1, a1, "Reads/Writes", "HTTP (Private)")
Rel(s1, a2, "Reads/Writes", "HTTP (Private)")
Rel(applicationapi, r5, "Reads/Writes", "HTTP (Private)")
Rel(user, s1, "HTTPS (Public)")


@enduml